function Svn-GetModifiedFiles()
{
    return ([xml](svn st --xml)).status.target.entry | % {$_.path}
}

function Svn-GetUnversionedFiles()
{
    [xml]$status = (Invoke-Expression "svn status --xml")
    return $status.status.target.entry | Where-Object {$_."wc-status"."item" -eq 'unversioned'} | % {$_.path}
}

function Svn-Add()
{
    param( [Parameter(ValueFromPipeline=$true)] [string]$file)
    Process { svn add $file; svn propset svn:mime-type text/plain $file}
}

function Svn-AddAll()
{
    Svn-GetUnversionedFiles | Svn-Add
}

# pprinter wrapper for normal svn log
function Svn-PPrintXmlLogEntries()
{
    [xml]$log = svn log -v --xml $args
    $log.log.logentry | % {
            Write-Host "Revision : " -NoNewline
            Write-Host $_.revision -ForegroundColor Green
            Write-Host "Author   : " -NoNewline
            Write-Host $_.author -ForegroundColor Green
            Write-Host "Date     : " -NoNewline
            Write-Host $_.date -ForegroundColor Green
            Write-Host "Message  : " -NoNewline
            Write-Host $_.msg -ForegroundColor Green
            $_.paths | % { 
                $_.path | % {
                    Write-Host "    " -NoNewline
                        if($_.action -eq 'A'){ Write-Host "$($_.action) " -NoNewline -ForegroundColor Cyan } 
                        else{ Write-Host "$($_.action) " -NoNewline -ForegroundColor Red }
                    Write-Output "$($_."#text")"
                }
            }
            Write-Host " "
        }
}

function Svn-PPrintDiff()
{
    foreach ($line in (&svn diff --internal-diff $args)){
        if($line -match '^\+[^+]'){
            Write-Host $line -fore Cyan
        }
        elseif($line -match '^\-[^-]'){
            Write-Host $line -fore Red
        }
        #elseif($line[0] -eq '@'){
        #    Write-Host $line -fore Green
        #}
        else {
            Write-Host $line
        }
    }
}

# this can be piped
function Svn-PPrintStat()
{
    [CmdletBinding()]
    param([string]$dir=".")
    
    $status=([xml](svn st --xml $dir)).status.target.entry
    foreach($entry in $status)
    {
        # pretty print if we're not part of a pipe, otherwise return stat'd files to be used by something else
        if(!($PSCmdlet.MyInvocation.line.contains("|")))
        { 
            switch($entry."wc-status"."item")
            {
                "added"          { Write-Host "A" -NoNewline -ForegroundColor Cyan}
                "modified"       { Write-Host "M" -NoNewline -ForegroundColor Red}
                "unversioned"    { Write-Host "?" -NoNewline -ForegroundColor Green}
            }
            Write-Host "`t" -NoNewLine
        }
        Write-Output $entry.path
    }
}

# convert entries from the svn log as 1 object per commit (ie Author/Revision etc + list of all files affected by that commit)
function Svn-GetLogCommitData()
{
    ([xml](svn log -v -g --xml)).log.logentry | % {
        $entry = $_;
        $obj = 1 | select -Property Revision,Author,Date,Message,Files;
        $obj.Revision = [int]$entry.Revision;
        $obj.Author = $entry.Author;
        $obj.Date = Get-Date $entry.Date;
        $obj.Message = $entry.msg;
        $obj.Files = @()
        $_.paths.path | foreach {
            $obj.Files+=,($_.action,$_.InnerText)
        }
        return $obj;
    }
}

# pprint an object commit log entry
function Svn-PPrintLogEntryObj()
{
    #TODO: input validation
    foreach($logentry in $input)
    {
        Write-Host "Revision : " -NoNewline
        Write-Host $logentry.Revision -ForegroundColor Green
        Write-Host "Author   : " -NoNewline
        Write-Host $logentry.Author -ForegroundColor Green
        Write-Host "Date     : " -NoNewline
        Write-Host $logentry.Date -ForegroundColor Green
        Write-Host "Message  : " -NoNewline
        Write-Host $logentry.Message -ForegroundColor Green
        $logentry.Files | % { 
            Write-Host "    " -NoNewline
                if($_[0] -eq 'A'){ Write-Host $($_[0]) -NoNewline -ForegroundColor Cyan } 
                else{ Write-Host $($_[0]) -NoNewline -ForegroundColor Red }
            Write-Host " " -NoNewline
            Write-Output "$($_[1])"
        }
        Write-Host " "
    }
}

# functions that use the above two obj-repr converters to do clever things

# find commit messages with file lists for some string in a message (like a JIRA number)
function Svn-Find
{ 
    param ( [Parameter(ValueFromPipeline=$true)] [string]$query) 
    Svn-GetLogCommitData | ? {$_.Message.Contains("$query")} | Svn-PPrintLogEntryObj
}

function Svn-GetMyCommits
{
    Svn-GetLogCommitData | ? {$_.Author -eq "zk7pjhn"} | Svn-PPrintLogEntryObj
}

function Svn-LocalPath
{
    param ( [Parameter(ValueFromPipeline=$true)] [string]$path) 
    Process 
    { 
        $path = $path.replace("/BERTI/trunk","C:\repos\berti\BERTI").replace("/mifid/trunk","C:\repos\mifid").replace("/", "\")
        Write-Output $path
    }
}

# TODO: function that removes binary props on all files in a repo?

Export-ModuleMember -function *
