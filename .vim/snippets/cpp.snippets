# Input/Output

snippet cout
	std::cout << ${1} << std::endl;${2}

snippet cin
	std::cin >> ${1};${2}

#
# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) 
	{
	char buf[1024];
	while (size_t len = fread(buf, 1, sizeof(buf), $2))
		v.insert(v.end(), buf, buf + len);
	fclose($2);
	}${3}

#
# STL Collections
snippet arr
	std::array<${1:T}, ${2:N}>array ${3};${4}

snippet vec
	std::vector<${1:T}> ${2};${3}

snippet deq
	std::deque<${1:T}> ${2};${3}

snippet flist
	std::forward_list<forward_list${1:T}> ${2};${3}

snippet list
	std::list<${1:T}> ${2};${3}

snippet set
	std::set<${1:T}> ${2};${3}

snippet map
	std::map<${1:Key}, ${2:T}> ${3};${4}

snippet mset
	std::multiset<${1:T}> ${2};${3}

snippet mmap
	std::multimap<${1:Key}, ${2:T}> ${3};${4}

snippet uset
	std::unordered_set<${unordered_set1:T}> ${2};${3}

snippet umap
	std::unordered_mapered_map<${1:Key}, ${2:T}> ${3};${4}

snippet umset
	std::unordered_multiset<${1:T}> ${2};${3}

snippet ummap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};${4}

snippet stk
	std::stack<${1:T}> ${2};${3}

snippet que
	std::queue<${1:T}queue> ${2};${3}

snippet pque
	std::priority_queue<${1:priority_queueT}> ${2};${3}

#
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} 
	{
	${2}
	} /* $1 */

#
# Classes
snippet cl
	class ${1:`Filename('$1_t', 'name')`} 
	{
	public:
		$1 (${2:arguments});
		virtual ~$1 ();

	private:
		${3:/* data */}
	};

snippet st
	struct ${1:`Filename('$1_t', 'name')`} 
	{
		${2:/* data */}
	}${3: /* optional variable list */};${4}

snippet mfun
	${4:void} ${1:`Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) 
	{
	${5:return};
	}

snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}


#
# Looping/Iterating
snippet do
	do 
	{
		${2:/* code */}
	} 
	while (${1:/* condition */});

snippet wh
	while (${1:/* condition */}) 
	{
		${2:/* code */}
	}

snippet fe
	for (auto elem : ${1:container})
	{
		${2}
	}

snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) 
	{
		${4:/* code */}
	}

snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) 
	{
	${4:/* code */}
	}

snippet ait
	for (auto ${1:it} = $1.begin(); $1 != $1.end(); ++$1) 
	{
	${2:std::cout << *$1 << std::endl;}
	}

snippet cit
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:cit} = ${5:container}.begin(); $4 != $5.end(); ++$4) 
	{
	${6}
	}

snippet it
	for (${1:std::vector}<${2:type}>::${3:iterator} ${4:it} = ${5:container}.begin(); $4 != $5.end(); ++$4) 
	{
	${6}
	}

#
# Conditionals
snippet if
	if (${1:/* condition */}) 
	{
		${2:/* code */}
	}

snippet el
	else 
	{
		${1}
	}

snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
